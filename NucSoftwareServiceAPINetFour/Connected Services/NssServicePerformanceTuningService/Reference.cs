//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PowerSetting", Namespace="http://schemas.datacontract.org/2004/07/PerformanceTuningLibrary")]
    [System.SerializableAttribute()]
    public partial struct PowerSetting : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint PL1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint PL2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TauField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint PL1 {
            get {
                return this.PL1Field;
            }
            set {
                if ((this.PL1Field.Equals(value) != true)) {
                    this.PL1Field = value;
                    this.RaisePropertyChanged("PL1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint PL2 {
            get {
                return this.PL2Field;
            }
            set {
                if ((this.PL2Field.Equals(value) != true)) {
                    this.PL2Field = value;
                    this.RaisePropertyChanged("PL2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Tau {
            get {
                return this.TauField;
            }
            set {
                if ((this.TauField.Equals(value) != true)) {
                    this.TauField = value;
                    this.RaisePropertyChanged("Tau");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PowerProfile", Namespace="http://schemas.datacontract.org/2004/07/PerformanceTuningLibrary")]
    [System.SerializableAttribute()]
    public partial struct PowerProfile : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.CpuMode CpuModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSelectedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint PL1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint PL2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint TauField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TauHtField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.CpuMode CpuMode {
            get {
                return this.CpuModeField;
            }
            set {
                if ((this.CpuModeField.Equals(value) != true)) {
                    this.CpuModeField = value;
                    this.RaisePropertyChanged("CpuMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSelected {
            get {
                return this.IsSelectedField;
            }
            set {
                if ((this.IsSelectedField.Equals(value) != true)) {
                    this.IsSelectedField = value;
                    this.RaisePropertyChanged("IsSelected");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint PL1 {
            get {
                return this.PL1Field;
            }
            set {
                if ((this.PL1Field.Equals(value) != true)) {
                    this.PL1Field = value;
                    this.RaisePropertyChanged("PL1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint PL2 {
            get {
                return this.PL2Field;
            }
            set {
                if ((this.PL2Field.Equals(value) != true)) {
                    this.PL2Field = value;
                    this.RaisePropertyChanged("PL2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint Tau {
            get {
                return this.TauField;
            }
            set {
                if ((this.TauField.Equals(value) != true)) {
                    this.TauField = value;
                    this.RaisePropertyChanged("Tau");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TauHt {
            get {
                return this.TauHtField;
            }
            set {
                if ((this.TauHtField.Equals(value) != true)) {
                    this.TauHtField = value;
                    this.RaisePropertyChanged("TauHt");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CpuMode", Namespace="http://schemas.datacontract.org/2004/07/PerformanceTuningLibrary")]
    public enum CpuMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Performance = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Balanced = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BatterySaver = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FanProfile", Namespace="http://schemas.datacontract.org/2004/07/PerformanceTuningLibrary")]
    [System.SerializableAttribute()]
    public partial struct FanProfile : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.FanSetting[] fanSettingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] profileField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.FanSetting[] fanSettings {
            get {
                return this.fanSettingsField;
            }
            set {
                if ((object.ReferenceEquals(this.fanSettingsField, value) != true)) {
                    this.fanSettingsField = value;
                    this.RaisePropertyChanged("fanSettings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] profile {
            get {
                return this.profileField;
            }
            set {
                if ((object.ReferenceEquals(this.profileField, value) != true)) {
                    this.profileField = value;
                    this.RaisePropertyChanged("profile");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FanSetting", Namespace="http://schemas.datacontract.org/2004/07/PerformanceTuningLibrary")]
    [System.SerializableAttribute()]
    public partial struct FanSetting : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte Configuration1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte Configuration2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte PrimaryDutyIncrementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte PrimaryFanOffTemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte PrimaryMaximumTemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte PrimaryMinimumDutyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte PrimaryMinimumTemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte SecondaryDutyIncrementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte SecondaryFanOffTemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte SecondaryMaximumTemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte SecondaryMinimumDutyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte SecondaryMinimumTemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.PrimaryInputSourceConfiguration primaryInputSourceConfigurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.SecondaryInputSourceConfiguration secondaryInputSourceConfigurationField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Configuration1 {
            get {
                return this.Configuration1Field;
            }
            set {
                if ((this.Configuration1Field.Equals(value) != true)) {
                    this.Configuration1Field = value;
                    this.RaisePropertyChanged("Configuration1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Configuration2 {
            get {
                return this.Configuration2Field;
            }
            set {
                if ((this.Configuration2Field.Equals(value) != true)) {
                    this.Configuration2Field = value;
                    this.RaisePropertyChanged("Configuration2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte PrimaryDutyIncrement {
            get {
                return this.PrimaryDutyIncrementField;
            }
            set {
                if ((this.PrimaryDutyIncrementField.Equals(value) != true)) {
                    this.PrimaryDutyIncrementField = value;
                    this.RaisePropertyChanged("PrimaryDutyIncrement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte PrimaryFanOffTemperature {
            get {
                return this.PrimaryFanOffTemperatureField;
            }
            set {
                if ((this.PrimaryFanOffTemperatureField.Equals(value) != true)) {
                    this.PrimaryFanOffTemperatureField = value;
                    this.RaisePropertyChanged("PrimaryFanOffTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte PrimaryMaximumTemperature {
            get {
                return this.PrimaryMaximumTemperatureField;
            }
            set {
                if ((this.PrimaryMaximumTemperatureField.Equals(value) != true)) {
                    this.PrimaryMaximumTemperatureField = value;
                    this.RaisePropertyChanged("PrimaryMaximumTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte PrimaryMinimumDuty {
            get {
                return this.PrimaryMinimumDutyField;
            }
            set {
                if ((this.PrimaryMinimumDutyField.Equals(value) != true)) {
                    this.PrimaryMinimumDutyField = value;
                    this.RaisePropertyChanged("PrimaryMinimumDuty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte PrimaryMinimumTemperature {
            get {
                return this.PrimaryMinimumTemperatureField;
            }
            set {
                if ((this.PrimaryMinimumTemperatureField.Equals(value) != true)) {
                    this.PrimaryMinimumTemperatureField = value;
                    this.RaisePropertyChanged("PrimaryMinimumTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte SecondaryDutyIncrement {
            get {
                return this.SecondaryDutyIncrementField;
            }
            set {
                if ((this.SecondaryDutyIncrementField.Equals(value) != true)) {
                    this.SecondaryDutyIncrementField = value;
                    this.RaisePropertyChanged("SecondaryDutyIncrement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte SecondaryFanOffTemperature {
            get {
                return this.SecondaryFanOffTemperatureField;
            }
            set {
                if ((this.SecondaryFanOffTemperatureField.Equals(value) != true)) {
                    this.SecondaryFanOffTemperatureField = value;
                    this.RaisePropertyChanged("SecondaryFanOffTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte SecondaryMaximumTemperature {
            get {
                return this.SecondaryMaximumTemperatureField;
            }
            set {
                if ((this.SecondaryMaximumTemperatureField.Equals(value) != true)) {
                    this.SecondaryMaximumTemperatureField = value;
                    this.RaisePropertyChanged("SecondaryMaximumTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte SecondaryMinimumDuty {
            get {
                return this.SecondaryMinimumDutyField;
            }
            set {
                if ((this.SecondaryMinimumDutyField.Equals(value) != true)) {
                    this.SecondaryMinimumDutyField = value;
                    this.RaisePropertyChanged("SecondaryMinimumDuty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte SecondaryMinimumTemperature {
            get {
                return this.SecondaryMinimumTemperatureField;
            }
            set {
                if ((this.SecondaryMinimumTemperatureField.Equals(value) != true)) {
                    this.SecondaryMinimumTemperatureField = value;
                    this.RaisePropertyChanged("SecondaryMinimumTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.PrimaryInputSourceConfiguration primaryInputSourceConfiguration {
            get {
                return this.primaryInputSourceConfigurationField;
            }
            set {
                if ((this.primaryInputSourceConfigurationField.Equals(value) != true)) {
                    this.primaryInputSourceConfigurationField = value;
                    this.RaisePropertyChanged("primaryInputSourceConfiguration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.SecondaryInputSourceConfiguration secondaryInputSourceConfiguration {
            get {
                return this.secondaryInputSourceConfigurationField;
            }
            set {
                if ((this.secondaryInputSourceConfigurationField.Equals(value) != true)) {
                    this.secondaryInputSourceConfigurationField = value;
                    this.RaisePropertyChanged("secondaryInputSourceConfiguration");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PrimaryInputSourceConfiguration", Namespace="http://schemas.datacontract.org/2004/07/PerformanceTuningLibrary")]
    public enum PrimaryInputSourceConfiguration : byte {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Default = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CPUTemperature = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PCHTemperature = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sensor1Temperature = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sensor2Temperature = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sensor3Temperature = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        dGpuTemperature = 6,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SecondaryInputSourceConfiguration", Namespace="http://schemas.datacontract.org/2004/07/PerformanceTuningLibrary")]
    public enum SecondaryInputSourceConfiguration : byte {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoControlled = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CPUTemperature = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PCHTemperature = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sensor1Temperature = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sensor2Temperature = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sensor3Temperature = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        dGpuTemperature = 6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FanControl.AllFanSettings", Namespace="http://schemas.datacontract.org/2004/07/PerformanceTuningLibrary")]
    [System.SerializableAttribute()]
    public partial struct FanControlAllFanSettings : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.FanSetting[] fanSettingsField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.FanSetting[] fanSettings {
            get {
                return this.fanSettingsField;
            }
            set {
                if ((object.ReferenceEquals(this.fanSettingsField, value) != true)) {
                    this.fanSettingsField = value;
                    this.RaisePropertyChanged("fanSettings");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FanProfile23", Namespace="http://schemas.datacontract.org/2004/07/PerformanceTuningLibrary")]
    [System.SerializableAttribute()]
    public partial struct FanProfile23 : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.FanSetting23[] fanSettingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] profileField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.FanSetting23[] fanSettings {
            get {
                return this.fanSettingsField;
            }
            set {
                if ((object.ReferenceEquals(this.fanSettingsField, value) != true)) {
                    this.fanSettingsField = value;
                    this.RaisePropertyChanged("fanSettings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] profile {
            get {
                return this.profileField;
            }
            set {
                if ((object.ReferenceEquals(this.profileField, value) != true)) {
                    this.profileField = value;
                    this.RaisePropertyChanged("profile");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FanSetting23", Namespace="http://schemas.datacontract.org/2004/07/PerformanceTuningLibrary")]
    [System.SerializableAttribute()]
    public partial struct FanSetting23 : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte FanControlModeAndSpeedRampRateLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte MaximumDutyCycleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte PrimaryDutyCycleIncrementAndSamplingPeriodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte PrimaryFanCutOffTemperatureOffsetAndRampDownRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte PrimaryMinimumDutyCycleAndRampAccelerationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte PrimaryMinimumTemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte PrimaryTemperatureSourceAndTemperatureHystersisField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte RampAccelerationTemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte SecondaryDutyCycleIncrementAndSamplingPeriodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte SecondaryFanCutOffTemperatureOffsetAndRampDownRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte SecondaryMinimumDutyCycleAndRampAccelerationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte SecondaryMinimumTemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte SecondaryRampAccelerationTemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte SecondaryTemperatureSourceAndTemperatureHystersisField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte FanControlModeAndSpeedRampRateLimit {
            get {
                return this.FanControlModeAndSpeedRampRateLimitField;
            }
            set {
                if ((this.FanControlModeAndSpeedRampRateLimitField.Equals(value) != true)) {
                    this.FanControlModeAndSpeedRampRateLimitField = value;
                    this.RaisePropertyChanged("FanControlModeAndSpeedRampRateLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte MaximumDutyCycle {
            get {
                return this.MaximumDutyCycleField;
            }
            set {
                if ((this.MaximumDutyCycleField.Equals(value) != true)) {
                    this.MaximumDutyCycleField = value;
                    this.RaisePropertyChanged("MaximumDutyCycle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte PrimaryDutyCycleIncrementAndSamplingPeriod {
            get {
                return this.PrimaryDutyCycleIncrementAndSamplingPeriodField;
            }
            set {
                if ((this.PrimaryDutyCycleIncrementAndSamplingPeriodField.Equals(value) != true)) {
                    this.PrimaryDutyCycleIncrementAndSamplingPeriodField = value;
                    this.RaisePropertyChanged("PrimaryDutyCycleIncrementAndSamplingPeriod");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte PrimaryFanCutOffTemperatureOffsetAndRampDownRate {
            get {
                return this.PrimaryFanCutOffTemperatureOffsetAndRampDownRateField;
            }
            set {
                if ((this.PrimaryFanCutOffTemperatureOffsetAndRampDownRateField.Equals(value) != true)) {
                    this.PrimaryFanCutOffTemperatureOffsetAndRampDownRateField = value;
                    this.RaisePropertyChanged("PrimaryFanCutOffTemperatureOffsetAndRampDownRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte PrimaryMinimumDutyCycleAndRampAcceleration {
            get {
                return this.PrimaryMinimumDutyCycleAndRampAccelerationField;
            }
            set {
                if ((this.PrimaryMinimumDutyCycleAndRampAccelerationField.Equals(value) != true)) {
                    this.PrimaryMinimumDutyCycleAndRampAccelerationField = value;
                    this.RaisePropertyChanged("PrimaryMinimumDutyCycleAndRampAcceleration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte PrimaryMinimumTemperature {
            get {
                return this.PrimaryMinimumTemperatureField;
            }
            set {
                if ((this.PrimaryMinimumTemperatureField.Equals(value) != true)) {
                    this.PrimaryMinimumTemperatureField = value;
                    this.RaisePropertyChanged("PrimaryMinimumTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte PrimaryTemperatureSourceAndTemperatureHystersis {
            get {
                return this.PrimaryTemperatureSourceAndTemperatureHystersisField;
            }
            set {
                if ((this.PrimaryTemperatureSourceAndTemperatureHystersisField.Equals(value) != true)) {
                    this.PrimaryTemperatureSourceAndTemperatureHystersisField = value;
                    this.RaisePropertyChanged("PrimaryTemperatureSourceAndTemperatureHystersis");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte RampAccelerationTemperature {
            get {
                return this.RampAccelerationTemperatureField;
            }
            set {
                if ((this.RampAccelerationTemperatureField.Equals(value) != true)) {
                    this.RampAccelerationTemperatureField = value;
                    this.RaisePropertyChanged("RampAccelerationTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte SecondaryDutyCycleIncrementAndSamplingPeriod {
            get {
                return this.SecondaryDutyCycleIncrementAndSamplingPeriodField;
            }
            set {
                if ((this.SecondaryDutyCycleIncrementAndSamplingPeriodField.Equals(value) != true)) {
                    this.SecondaryDutyCycleIncrementAndSamplingPeriodField = value;
                    this.RaisePropertyChanged("SecondaryDutyCycleIncrementAndSamplingPeriod");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte SecondaryFanCutOffTemperatureOffsetAndRampDownRate {
            get {
                return this.SecondaryFanCutOffTemperatureOffsetAndRampDownRateField;
            }
            set {
                if ((this.SecondaryFanCutOffTemperatureOffsetAndRampDownRateField.Equals(value) != true)) {
                    this.SecondaryFanCutOffTemperatureOffsetAndRampDownRateField = value;
                    this.RaisePropertyChanged("SecondaryFanCutOffTemperatureOffsetAndRampDownRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte SecondaryMinimumDutyCycleAndRampAcceleration {
            get {
                return this.SecondaryMinimumDutyCycleAndRampAccelerationField;
            }
            set {
                if ((this.SecondaryMinimumDutyCycleAndRampAccelerationField.Equals(value) != true)) {
                    this.SecondaryMinimumDutyCycleAndRampAccelerationField = value;
                    this.RaisePropertyChanged("SecondaryMinimumDutyCycleAndRampAcceleration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte SecondaryMinimumTemperature {
            get {
                return this.SecondaryMinimumTemperatureField;
            }
            set {
                if ((this.SecondaryMinimumTemperatureField.Equals(value) != true)) {
                    this.SecondaryMinimumTemperatureField = value;
                    this.RaisePropertyChanged("SecondaryMinimumTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte SecondaryRampAccelerationTemperature {
            get {
                return this.SecondaryRampAccelerationTemperatureField;
            }
            set {
                if ((this.SecondaryRampAccelerationTemperatureField.Equals(value) != true)) {
                    this.SecondaryRampAccelerationTemperatureField = value;
                    this.RaisePropertyChanged("SecondaryRampAccelerationTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte SecondaryTemperatureSourceAndTemperatureHystersis {
            get {
                return this.SecondaryTemperatureSourceAndTemperatureHystersisField;
            }
            set {
                if ((this.SecondaryTemperatureSourceAndTemperatureHystersisField.Equals(value) != true)) {
                    this.SecondaryTemperatureSourceAndTemperatureHystersisField = value;
                    this.RaisePropertyChanged("SecondaryTemperatureSourceAndTemperatureHystersis");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FanProfileRN", Namespace="http://schemas.datacontract.org/2004/07/PerformanceTuningLibrary")]
    [System.SerializableAttribute()]
    public partial struct FanProfileRN : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrentBiosFanModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.FanSettingRN[] fanSettingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string fanTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] profileField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrentBiosFanMode {
            get {
                return this.CurrentBiosFanModeField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentBiosFanModeField, value) != true)) {
                    this.CurrentBiosFanModeField = value;
                    this.RaisePropertyChanged("CurrentBiosFanMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.FanSettingRN[] fanSettings {
            get {
                return this.fanSettingsField;
            }
            set {
                if ((object.ReferenceEquals(this.fanSettingsField, value) != true)) {
                    this.fanSettingsField = value;
                    this.RaisePropertyChanged("fanSettings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string fanType {
            get {
                return this.fanTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.fanTypeField, value) != true)) {
                    this.fanTypeField = value;
                    this.RaisePropertyChanged("fanType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] profile {
            get {
                return this.profileField;
            }
            set {
                if ((object.ReferenceEquals(this.profileField, value) != true)) {
                    this.profileField = value;
                    this.RaisePropertyChanged("profile");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FanSettingRN", Namespace="http://schemas.datacontract.org/2004/07/PerformanceTuningLibrary")]
    [System.SerializableAttribute()]
    public partial struct FanSettingRN : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte FanControlModeAndSpeedRampRateLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] FanModeBytesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FanModeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte MaximumDutyCycleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte PrimaryDutyCycleIncrementAndSamplingPeriodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte PrimaryFanCutOffTemperatureOffsetAndRampDownRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte PrimaryMinimumDutyCycleAndRampAccelerationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte PrimaryMinimumTemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte PrimaryTemperatureSourceAndTemperatureHystersisField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte RampAccelerationTemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte SecondaryDutyCycleIncrementAndSamplingPeriodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte SecondaryFanCutOffTemperatureOffsetAndRampDownRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte SecondaryMinimumDutyCycleAndRampAccelerationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte SecondaryMinimumTemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte SecondaryRampAccelerationTemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte SecondaryTemperatureSourceAndTemperatureHystersisField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte FanControlModeAndSpeedRampRateLimit {
            get {
                return this.FanControlModeAndSpeedRampRateLimitField;
            }
            set {
                if ((this.FanControlModeAndSpeedRampRateLimitField.Equals(value) != true)) {
                    this.FanControlModeAndSpeedRampRateLimitField = value;
                    this.RaisePropertyChanged("FanControlModeAndSpeedRampRateLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] FanModeBytes {
            get {
                return this.FanModeBytesField;
            }
            set {
                if ((object.ReferenceEquals(this.FanModeBytesField, value) != true)) {
                    this.FanModeBytesField = value;
                    this.RaisePropertyChanged("FanModeBytes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FanModeName {
            get {
                return this.FanModeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FanModeNameField, value) != true)) {
                    this.FanModeNameField = value;
                    this.RaisePropertyChanged("FanModeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte MaximumDutyCycle {
            get {
                return this.MaximumDutyCycleField;
            }
            set {
                if ((this.MaximumDutyCycleField.Equals(value) != true)) {
                    this.MaximumDutyCycleField = value;
                    this.RaisePropertyChanged("MaximumDutyCycle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte PrimaryDutyCycleIncrementAndSamplingPeriod {
            get {
                return this.PrimaryDutyCycleIncrementAndSamplingPeriodField;
            }
            set {
                if ((this.PrimaryDutyCycleIncrementAndSamplingPeriodField.Equals(value) != true)) {
                    this.PrimaryDutyCycleIncrementAndSamplingPeriodField = value;
                    this.RaisePropertyChanged("PrimaryDutyCycleIncrementAndSamplingPeriod");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte PrimaryFanCutOffTemperatureOffsetAndRampDownRate {
            get {
                return this.PrimaryFanCutOffTemperatureOffsetAndRampDownRateField;
            }
            set {
                if ((this.PrimaryFanCutOffTemperatureOffsetAndRampDownRateField.Equals(value) != true)) {
                    this.PrimaryFanCutOffTemperatureOffsetAndRampDownRateField = value;
                    this.RaisePropertyChanged("PrimaryFanCutOffTemperatureOffsetAndRampDownRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte PrimaryMinimumDutyCycleAndRampAcceleration {
            get {
                return this.PrimaryMinimumDutyCycleAndRampAccelerationField;
            }
            set {
                if ((this.PrimaryMinimumDutyCycleAndRampAccelerationField.Equals(value) != true)) {
                    this.PrimaryMinimumDutyCycleAndRampAccelerationField = value;
                    this.RaisePropertyChanged("PrimaryMinimumDutyCycleAndRampAcceleration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte PrimaryMinimumTemperature {
            get {
                return this.PrimaryMinimumTemperatureField;
            }
            set {
                if ((this.PrimaryMinimumTemperatureField.Equals(value) != true)) {
                    this.PrimaryMinimumTemperatureField = value;
                    this.RaisePropertyChanged("PrimaryMinimumTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte PrimaryTemperatureSourceAndTemperatureHystersis {
            get {
                return this.PrimaryTemperatureSourceAndTemperatureHystersisField;
            }
            set {
                if ((this.PrimaryTemperatureSourceAndTemperatureHystersisField.Equals(value) != true)) {
                    this.PrimaryTemperatureSourceAndTemperatureHystersisField = value;
                    this.RaisePropertyChanged("PrimaryTemperatureSourceAndTemperatureHystersis");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte RampAccelerationTemperature {
            get {
                return this.RampAccelerationTemperatureField;
            }
            set {
                if ((this.RampAccelerationTemperatureField.Equals(value) != true)) {
                    this.RampAccelerationTemperatureField = value;
                    this.RaisePropertyChanged("RampAccelerationTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte SecondaryDutyCycleIncrementAndSamplingPeriod {
            get {
                return this.SecondaryDutyCycleIncrementAndSamplingPeriodField;
            }
            set {
                if ((this.SecondaryDutyCycleIncrementAndSamplingPeriodField.Equals(value) != true)) {
                    this.SecondaryDutyCycleIncrementAndSamplingPeriodField = value;
                    this.RaisePropertyChanged("SecondaryDutyCycleIncrementAndSamplingPeriod");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte SecondaryFanCutOffTemperatureOffsetAndRampDownRate {
            get {
                return this.SecondaryFanCutOffTemperatureOffsetAndRampDownRateField;
            }
            set {
                if ((this.SecondaryFanCutOffTemperatureOffsetAndRampDownRateField.Equals(value) != true)) {
                    this.SecondaryFanCutOffTemperatureOffsetAndRampDownRateField = value;
                    this.RaisePropertyChanged("SecondaryFanCutOffTemperatureOffsetAndRampDownRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte SecondaryMinimumDutyCycleAndRampAcceleration {
            get {
                return this.SecondaryMinimumDutyCycleAndRampAccelerationField;
            }
            set {
                if ((this.SecondaryMinimumDutyCycleAndRampAccelerationField.Equals(value) != true)) {
                    this.SecondaryMinimumDutyCycleAndRampAccelerationField = value;
                    this.RaisePropertyChanged("SecondaryMinimumDutyCycleAndRampAcceleration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte SecondaryMinimumTemperature {
            get {
                return this.SecondaryMinimumTemperatureField;
            }
            set {
                if ((this.SecondaryMinimumTemperatureField.Equals(value) != true)) {
                    this.SecondaryMinimumTemperatureField = value;
                    this.RaisePropertyChanged("SecondaryMinimumTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte SecondaryRampAccelerationTemperature {
            get {
                return this.SecondaryRampAccelerationTemperatureField;
            }
            set {
                if ((this.SecondaryRampAccelerationTemperatureField.Equals(value) != true)) {
                    this.SecondaryRampAccelerationTemperatureField = value;
                    this.RaisePropertyChanged("SecondaryRampAccelerationTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte SecondaryTemperatureSourceAndTemperatureHystersis {
            get {
                return this.SecondaryTemperatureSourceAndTemperatureHystersisField;
            }
            set {
                if ((this.SecondaryTemperatureSourceAndTemperatureHystersisField.Equals(value) != true)) {
                    this.SecondaryTemperatureSourceAndTemperatureHystersisField = value;
                    this.RaisePropertyChanged("SecondaryTemperatureSourceAndTemperatureHystersis");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NssServicePerformanceTuningService.IPerformanceTuningServiceContract")]
    public interface IPerformanceTuningServiceContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/GetPowerLevelControlSupporte" +
            "d", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/GetPowerLevelControlSupporte" +
            "dResponse")]
        System.Nullable<bool> GetPowerLevelControlSupported();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/GetPowerLevelControlSupporte" +
            "d", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/GetPowerLevelControlSupporte" +
            "dResponse")]
        System.Threading.Tasks.Task<System.Nullable<bool>> GetPowerLevelControlSupportedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/GetCurrentPowerSettings", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/GetCurrentPowerSettingsRespo" +
            "nse")]
        NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.PowerSetting GetCurrentPowerSettings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/GetCurrentPowerSettings", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/GetCurrentPowerSettingsRespo" +
            "nse")]
        System.Threading.Tasks.Task<NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.PowerSetting> GetCurrentPowerSettingsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/GetSupportedPowerProfiles", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/GetSupportedPowerProfilesRes" +
            "ponse")]
        NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.PowerProfile[] GetSupportedPowerProfiles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/GetSupportedPowerProfiles", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/GetSupportedPowerProfilesRes" +
            "ponse")]
        System.Threading.Tasks.Task<NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.PowerProfile[]> GetSupportedPowerProfilesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/IsFanEcSupported", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/IsFanEcSupportedResponse")]
        System.Nullable<bool> IsFanEcSupported();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/IsFanEcSupported", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/IsFanEcSupportedResponse")]
        System.Threading.Tasks.Task<System.Nullable<bool>> IsFanEcSupportedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/IsFanProfilesSupported", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/IsFanProfilesSupportedRespon" +
            "se")]
        System.Nullable<bool> IsFanProfilesSupported();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/IsFanProfilesSupported", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/IsFanProfilesSupportedRespon" +
            "se")]
        System.Threading.Tasks.Task<System.Nullable<bool>> IsFanProfilesSupportedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/GetFanProfileData", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/GetFanProfileDataResponse")]
        NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.FanProfile GetFanProfileData(string fanProfileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/GetFanProfileData", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/GetFanProfileDataResponse")]
        System.Threading.Tasks.Task<NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.FanProfile> GetFanProfileDataAsync(string fanProfileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/GetSupportedFanModes", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/GetSupportedFanModesResponse" +
            "")]
        string[] GetSupportedFanModes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/GetSupportedFanModes", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/GetSupportedFanModesResponse" +
            "")]
        System.Threading.Tasks.Task<string[]> GetSupportedFanModesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/GetCurrentBiosFanModeName", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/GetCurrentBiosFanModeNameRes" +
            "ponse")]
        string GetCurrentBiosFanModeName();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/GetCurrentBiosFanModeName", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/GetCurrentBiosFanModeNameRes" +
            "ponse")]
        System.Threading.Tasks.Task<string> GetCurrentBiosFanModeNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/SetFanMode", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/SetFanModeResponse")]
        bool SetFanMode(string FanMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/SetFanMode", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/SetFanModeResponse")]
        System.Threading.Tasks.Task<bool> SetFanModeAsync(string FanMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/SetCustomPowerSetting", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/SetCustomPowerSettingRespons" +
            "e")]
        bool SetCustomPowerSetting(NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.PowerSetting PowerSetting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/SetCustomPowerSetting", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/SetCustomPowerSettingRespons" +
            "e")]
        System.Threading.Tasks.Task<bool> SetCustomPowerSettingAsync(NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.PowerSetting PowerSetting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/ApplyBiosPowerProfile", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/ApplyBiosPowerProfileRespons" +
            "e")]
        bool ApplyBiosPowerProfile(string PowerProfileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/ApplyBiosPowerProfile", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/ApplyBiosPowerProfileRespons" +
            "e")]
        System.Threading.Tasks.Task<bool> ApplyBiosPowerProfileAsync(string PowerProfileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/SupportedFanTypes", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/SupportedFanTypesResponse")]
        string[] SupportedFanTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/SupportedFanTypes", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/SupportedFanTypesResponse")]
        System.Threading.Tasks.Task<string[]> SupportedFanTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/SetFanCustom", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/SetFanCustomResponse")]
        bool SetFanCustom(NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.FanControlAllFanSettings FanSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/SetFanCustom", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/SetFanCustomResponse")]
        System.Threading.Tasks.Task<bool> SetFanCustomAsync(NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.FanControlAllFanSettings FanSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/SetFanOffConfiguration", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/SetFanOffConfigurationRespon" +
            "se")]
        bool SetFanOffConfiguration(string FanMode, bool isFanOff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/SetFanOffConfiguration", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/SetFanOffConfigurationRespon" +
            "se")]
        System.Threading.Tasks.Task<bool> SetFanOffConfigurationAsync(string FanMode, bool isFanOff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/GetFanProfileData23", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/GetFanProfileData23Response")]
        NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.FanProfile23 GetFanProfileData23(string fanProfileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/GetFanProfileData23", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/GetFanProfileData23Response")]
        System.Threading.Tasks.Task<NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.FanProfile23> GetFanProfileData23Async(string fanProfileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/SetFanDutyCycleFixedMode", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/SetFanDutyCycleFixedModeResp" +
            "onse")]
        bool SetFanDutyCycleFixedMode(string selectedFanMode, byte[] FanBytes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/SetFanDutyCycleFixedMode", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/SetFanDutyCycleFixedModeResp" +
            "onse")]
        System.Threading.Tasks.Task<bool> SetFanDutyCycleFixedModeAsync(string selectedFanMode, byte[] FanBytes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/GetFanProfileDataRN", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/GetFanProfileDataRNResponse")]
        NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.FanProfileRN[] GetFanProfileDataRN();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/GetFanProfileDataRN", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/GetFanProfileDataRNResponse")]
        System.Threading.Tasks.Task<NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.FanProfileRN[]> GetFanProfileDataRNAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/SetFanModeRN", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/SetFanModeRNResponse")]
        bool SetFanModeRN(string FanMode, string FanType, NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.FanProfileRN[] fanProfiles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerformanceTuningServiceContract/SetFanModeRN", ReplyAction="http://tempuri.org/IPerformanceTuningServiceContract/SetFanModeRNResponse")]
        System.Threading.Tasks.Task<bool> SetFanModeRNAsync(string FanMode, string FanType, NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.FanProfileRN[] fanProfiles);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPerformanceTuningServiceContractChannel : NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.IPerformanceTuningServiceContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PerformanceTuningServiceContractClient : System.ServiceModel.ClientBase<NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.IPerformanceTuningServiceContract>, NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.IPerformanceTuningServiceContract {
        
        public PerformanceTuningServiceContractClient() {
        }
        
        public PerformanceTuningServiceContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PerformanceTuningServiceContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PerformanceTuningServiceContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PerformanceTuningServiceContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Nullable<bool> GetPowerLevelControlSupported() {
            return base.Channel.GetPowerLevelControlSupported();
        }
        
        public System.Threading.Tasks.Task<System.Nullable<bool>> GetPowerLevelControlSupportedAsync() {
            return base.Channel.GetPowerLevelControlSupportedAsync();
        }
        
        public NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.PowerSetting GetCurrentPowerSettings() {
            return base.Channel.GetCurrentPowerSettings();
        }
        
        public System.Threading.Tasks.Task<NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.PowerSetting> GetCurrentPowerSettingsAsync() {
            return base.Channel.GetCurrentPowerSettingsAsync();
        }
        
        public NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.PowerProfile[] GetSupportedPowerProfiles() {
            return base.Channel.GetSupportedPowerProfiles();
        }
        
        public System.Threading.Tasks.Task<NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.PowerProfile[]> GetSupportedPowerProfilesAsync() {
            return base.Channel.GetSupportedPowerProfilesAsync();
        }
        
        public System.Nullable<bool> IsFanEcSupported() {
            return base.Channel.IsFanEcSupported();
        }
        
        public System.Threading.Tasks.Task<System.Nullable<bool>> IsFanEcSupportedAsync() {
            return base.Channel.IsFanEcSupportedAsync();
        }
        
        public System.Nullable<bool> IsFanProfilesSupported() {
            return base.Channel.IsFanProfilesSupported();
        }
        
        public System.Threading.Tasks.Task<System.Nullable<bool>> IsFanProfilesSupportedAsync() {
            return base.Channel.IsFanProfilesSupportedAsync();
        }
        
        public NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.FanProfile GetFanProfileData(string fanProfileName) {
            return base.Channel.GetFanProfileData(fanProfileName);
        }
        
        public System.Threading.Tasks.Task<NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.FanProfile> GetFanProfileDataAsync(string fanProfileName) {
            return base.Channel.GetFanProfileDataAsync(fanProfileName);
        }
        
        public string[] GetSupportedFanModes() {
            return base.Channel.GetSupportedFanModes();
        }
        
        public System.Threading.Tasks.Task<string[]> GetSupportedFanModesAsync() {
            return base.Channel.GetSupportedFanModesAsync();
        }
        
        public string GetCurrentBiosFanModeName() {
            return base.Channel.GetCurrentBiosFanModeName();
        }
        
        public System.Threading.Tasks.Task<string> GetCurrentBiosFanModeNameAsync() {
            return base.Channel.GetCurrentBiosFanModeNameAsync();
        }
        
        public bool SetFanMode(string FanMode) {
            return base.Channel.SetFanMode(FanMode);
        }
        
        public System.Threading.Tasks.Task<bool> SetFanModeAsync(string FanMode) {
            return base.Channel.SetFanModeAsync(FanMode);
        }
        
        public bool SetCustomPowerSetting(NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.PowerSetting PowerSetting) {
            return base.Channel.SetCustomPowerSetting(PowerSetting);
        }
        
        public System.Threading.Tasks.Task<bool> SetCustomPowerSettingAsync(NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.PowerSetting PowerSetting) {
            return base.Channel.SetCustomPowerSettingAsync(PowerSetting);
        }
        
        public bool ApplyBiosPowerProfile(string PowerProfileName) {
            return base.Channel.ApplyBiosPowerProfile(PowerProfileName);
        }
        
        public System.Threading.Tasks.Task<bool> ApplyBiosPowerProfileAsync(string PowerProfileName) {
            return base.Channel.ApplyBiosPowerProfileAsync(PowerProfileName);
        }
        
        public string[] SupportedFanTypes() {
            return base.Channel.SupportedFanTypes();
        }
        
        public System.Threading.Tasks.Task<string[]> SupportedFanTypesAsync() {
            return base.Channel.SupportedFanTypesAsync();
        }
        
        public bool SetFanCustom(NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.FanControlAllFanSettings FanSettings) {
            return base.Channel.SetFanCustom(FanSettings);
        }
        
        public System.Threading.Tasks.Task<bool> SetFanCustomAsync(NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.FanControlAllFanSettings FanSettings) {
            return base.Channel.SetFanCustomAsync(FanSettings);
        }
        
        public bool SetFanOffConfiguration(string FanMode, bool isFanOff) {
            return base.Channel.SetFanOffConfiguration(FanMode, isFanOff);
        }
        
        public System.Threading.Tasks.Task<bool> SetFanOffConfigurationAsync(string FanMode, bool isFanOff) {
            return base.Channel.SetFanOffConfigurationAsync(FanMode, isFanOff);
        }
        
        public NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.FanProfile23 GetFanProfileData23(string fanProfileName) {
            return base.Channel.GetFanProfileData23(fanProfileName);
        }
        
        public System.Threading.Tasks.Task<NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.FanProfile23> GetFanProfileData23Async(string fanProfileName) {
            return base.Channel.GetFanProfileData23Async(fanProfileName);
        }
        
        public bool SetFanDutyCycleFixedMode(string selectedFanMode, byte[] FanBytes) {
            return base.Channel.SetFanDutyCycleFixedMode(selectedFanMode, FanBytes);
        }
        
        public System.Threading.Tasks.Task<bool> SetFanDutyCycleFixedModeAsync(string selectedFanMode, byte[] FanBytes) {
            return base.Channel.SetFanDutyCycleFixedModeAsync(selectedFanMode, FanBytes);
        }
        
        public NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.FanProfileRN[] GetFanProfileDataRN() {
            return base.Channel.GetFanProfileDataRN();
        }
        
        public System.Threading.Tasks.Task<NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.FanProfileRN[]> GetFanProfileDataRNAsync() {
            return base.Channel.GetFanProfileDataRNAsync();
        }
        
        public bool SetFanModeRN(string FanMode, string FanType, NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.FanProfileRN[] fanProfiles) {
            return base.Channel.SetFanModeRN(FanMode, FanType, fanProfiles);
        }
        
        public System.Threading.Tasks.Task<bool> SetFanModeRNAsync(string FanMode, string FanType, NucSoftwareServiceAPINetFour.NssServicePerformanceTuningService.FanProfileRN[] fanProfiles) {
            return base.Channel.SetFanModeRNAsync(FanMode, FanType, fanProfiles);
        }
    }
}
